from semantic_router import Route
from semantic_router.encoders import OpenAIEncoder
from semantic_router.layer import RouteLayer
import os
from dotenv import load_dotenv
import streamlit as st

load_dotenv()

class queryClassifier:
    def __init__(self, encoder = None):
        # self.encoder = encoder if encoder else OpenAIEncoder(openai_api_key=os.environ["OPENAI_API_KEY"])
        self.encoder = encoder if encoder else OpenAIEncoder(openai_api_key=st.secrets["OPENAI_API_KEY"])
        self.routes = []

    def add_route(self, route:Route):
        self.routes.append(route)

    def generate_router_layer(self):
        self.layer = RouteLayer(encoder=self.encoder, routes=self.routes)

    def classify(self, query):
        if not self.layer:
            self.generate_router_layer()
        return self.layer(query).name        



audit_company_queries = Route(
    name="Auditor query",
    utterances=[
        "Show me all the companies audited by Deloitte.",
        "List all audit reports generated by PwC.",
        "How many companies were audited by KPMG in 2020?",
        "Can you give me details of the audits performed by EY?",
        "Which companies were reviewed by BDO last year?",
        "Provide the audit opinions from Grant Thornton.",
        "Who are the auditors for XYZ Corporation?",
        "List all audit engagements by Crowe LLP.",
        "What were the findings of RSM US LLP's audits?",
        "Show the number of audits conducted by Mazars USA.",
    ],
)

company_queries = Route(
    name="Company query",
    utterances=[
        "Can you give me details on the audit report for Apple Inc.?",
        "Show me the latest audit opinion for Google.",
        "Provide the audit findings for Microsoft Corporation.",
        "List all audit reports for Tesla Inc.",
        "What were the audit opinions for Amazon?",
        "Show the audit history of Facebook.",
        "Give me the details of the audits for Netflix.",
        "Who audited IBM last year?",
        "Show me the audit reports for Intel Corporation.",
        "List the audit findings for Uber Technologies.",
    ],
)

company_and_audit_company_queries = Route(
    name="Company and Auditor query",
    utterances=[
        "Can you give me details on the audit report generated by PwC for Apple Inc.?",
        "Show me the audit opinion provided by Deloitte for Google.",
        "What did KPMG find in their audit of Microsoft Corporation?",
        "Provide the audit details from EY for Tesla Inc.",
        "Who audited Amazon on behalf of Grant Thornton?",
        "List all the audits performed by BDO for Facebook.",
        "Give me the reports from RSM US LLP for Netflix.",
        "What were the findings of Mazars USA in their audit of IBM?",
        "Show me the audit details for Intel Corporation done by Crowe LLP.",
        "List the audit reports generated by Deloitte for Uber Technologies.",
    ],
)

def load_classifer() -> queryClassifier:
    classifier = queryClassifier()
    routes = [audit_company_queries, company_queries, company_and_audit_company_queries]

    for route in routes:
        classifier.add_route(route)

    classifier.generate_router_layer()

    return classifier
    
if __name__ == "__main__":
    classifier = queryClassifier()
    routes = [audit_company_queries, company_queries, company_and_audit_company_queries]

    for route in routes:
        classifier.add_route(route)

    classifier.generate_router_layer()
    
    #case - 1
    query= "Can you give me details about audit done by Deloitte Company?"
    print("\n\nquery= Can you give me details about audit done by Deloitte Company?")
    print(f"Classification: {classifier.classify(query)}")


    #case - 2
    query= "Can you summarize the audit report of AMD?"
    print('\n\nquery= "Can you summarize the audit report of AMD?"')
    print(f"Classification: {classifier.classify(query)}")

    #case - 3
    query= "Hey, How you doing?"
    print('\n\nquery= "Hey, How you doing?"')
    print(f"Classification: {classifier.classify(query)}")

    #case - 4
    query= "I need details about the Consolidated Financial Statements Audit Report generated on Adams Resources & Energy, Inc?"
    print('\n\nquery= "I need details about the Consolidated Financial Statements Audit Report generated on Adams Resources & Energy, Inc?"')
    print(f"Classification: {classifier.classify(query)}")